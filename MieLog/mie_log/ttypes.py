#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class mie_log_type:
  RECOMMEND = 0
  VIEW = 1
  REJECT = 2
  ACCEPT = 3
  FAVORITE = 4
  VISIT = 5
  PRICING = 6

  _VALUES_TO_NAMES = {
    0: "RECOMMEND",
    1: "VIEW",
    2: "REJECT",
    3: "ACCEPT",
    4: "FAVORITE",
    5: "VISIT",
    6: "PRICING",
  }

  _NAMES_TO_VALUES = {
    "RECOMMEND": 0,
    "VIEW": 1,
    "REJECT": 2,
    "ACCEPT": 3,
    "FAVORITE": 4,
    "VISIT": 5,
    "PRICING": 6,
  }


class mie_log_struct:
  """
  Attributes:
   - business_id
   - type
   - mark
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'business_id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.DOUBLE, 'mark', None, None, ), # 3
  )

  def __init__(self, business_id=None, type=None, mark=None,):
    self.business_id = business_id
    self.type = type
    self.mark = mark

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.business_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.mark = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mie_log_struct')
    if self.business_id is not None:
      oprot.writeFieldBegin('business_id', TType.I64, 1)
      oprot.writeI64(self.business_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.mark is not None:
      oprot.writeFieldBegin('mark', TType.DOUBLE, 3)
      oprot.writeDouble(self.mark)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
